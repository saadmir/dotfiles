" ========================
" Basic Vim Configuration
" ========================
set nocompatible            " Disable vi compatibility
filetype off                " Required for vim-plug

" ========================
" vim-plug Plugin Manager
" ========================
call plug#begin('~/.vim/plugged')

" Add plugins here
Plug 'tpope/vim-sensible'   " Sensible defaults
Plug 'preservim/nerdtree'   " File explorer
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'     " Fuzzy finder
Plug 'airblade/vim-gitgutter' " Git diff indicators
Plug 'tpope/vim-fugitive'   " Git integration
Plug 'vim-airline/vim-airline' " Status line
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdcommenter' " Easy commenting
Plug 'sheerun/vim-polyglot' " Language pack
Plug 'ycm-core/YouCompleteMe', { 'do': './install.py' } " Auto-completion
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && npx --yes yarn install' } " Markdown preview
Plug 'neoclide/coc.nvim', {'branch': 'release'} " Intellisense engine
Plug 'dense-analysis/ale'    " Asynchronous linting
Plug 'NLKNguyen/papercolor-theme' " PaperColor theme

" Color schemes
Plug 'morhetz/gruvbox'
Plug 'joshdick/onedark.vim'
Plug 'arcticicestudio/nord-vim'

call plug#end()

" ========================
" Basic Settings
" ========================
syntax on
filetype plugin indent on

set number                  " Show line numbers
set relativenumber          " Show relative numbers
set tabstop=4               " Number of spaces that a <Tab> in the file counts for
set shiftwidth=4            " Number of spaces to use for each step of (auto)indent
set expandtab               " Use spaces instead of tabs
set smartindent             " Smart autoindenting
set autoindent              " Auto indent
set cursorline              " Highlight current line
set showmatch               " Show matching brackets
set incsearch               " Incremental search
set hlsearch                " Highlight search results
set ignorecase              " Ignore case when searching
set smartcase               " Override ignorecase if search contains uppercase
set backspace=indent,eol,start " Make backspace work normally
set encoding=utf-8          " Set encoding to UTF-8
set fileencoding=utf-8      " Set file encoding to UTF-8
set mouse=a                 " Enable mouse support
set laststatus=2            " Always show status line
set updatetime=100          " Faster update time for gitgutter

" Create backup directories
silent !mkdir -p ~/.vim/backup
silent !mkdir -p ~/.vim/swap
silent !mkdir -p ~/.vim/undo
set backupdir=~/.vim/backup//
set directory=~/.vim/swap//
set undodir=~/.vim/undo//

" ========================
" Plugin Configurations
" ========================

" NERDTree
map <C-n> :NERDTreeToggle<CR>
let NERDTreeShowHidden=1
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" Airline
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_theme = 'onedark'

" Gruvbox color scheme
colorscheme gruvbox
set background=dark

" FZF
nnoremap <C-p> :Files<CR>
nnoremap <C-f> :Rg<CR>

" GitGutter
let g:gitgutter_sign_added = '++'
let g:gitgutter_sign_modified = '~~'
let g:gitgutter_sign_removed = '--'

" NERDCommenter
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'

" PaperColor theme"
set background=light
colorscheme PaperColor

" ========================
" Key Mappings
" ========================
let mapleader = " "        " Set leader key to space

" Clear search highlights
nnoremap <leader><space> :nohlsearch<CR>

" Better window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Save and quit shortcuts
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>x :x<CR>

" Tab navigation
nnoremap <leader>tn :tabnew<CR>
nnoremap <leader>tc :tabclose<CR>
nnoremap <leader>tl :tabnext<CR>
nnoremap <leader>th :tabprev<CR>

" ========================
" Autocommands
" ========================
augroup vimrc
    autocmd!
    " Auto source vimrc when saved
    autocmd BufWritePost .vimrc source %
    " Auto remove trailing whitespace
    autocmd BufWritePre * %s/\s\+$//e
augroup END

" ========================
" Functions
" ========================
" Toggle relative numbers
function! ToggleRelativeNumber()
    if &relativenumber
        set norelativenumber
    else
        set relativenumber
    endif
endfunction
nnoremap <leader>rn :call ToggleRelativeNumber()<CR>