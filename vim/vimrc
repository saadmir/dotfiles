set nocompatible                    " full vim
syntax enable                       " enable syntax highlighting
set encoding=utf8                   " utf8 default encoding

call pathogen#infect()              " load pathogen
filetype plugin indent on

noremap , \
let mapleader = ","

set t_Co=256

" syntax highlighting
syntax on
color xoria256

set autochdir

set scrolloff=3                     " show 3 lines of context around the cursor
set autoread                        " set to auto read when a file is changed from the outside
set mouse=a                         " allow for full mouse support
set autowrite
set showcmd                         " show typed commands

set wildmenu                        " turn on WiLd menu
set wildmode=list:longest,list:full " activate TAB auto-completion for file paths
set wildignore+=*.o,.git,.svn,node_modules

set ruler                           " always show current position
set backspace=indent,eol,start      " set backspace config, backspace as normal
set nomodeline                      " security

set hlsearch                        " highlight search things
set incsearch                       " go to search results as typing
set smartcase                       " but case-sensitive if expression contains a capital letter.
set ignorecase                      " ignore case when searching
set gdefault                        " assume global when searching or substituting
set magic                           " set magic on, for regular expressions
set showmatch                       " show matching brackets when text indicator is over them

set lazyredraw                      " don't redraw screen during macros, faster
set ttyfast                         " improves redrawing for newer computers
set fileformats=unix,mac,dos

set nobackup                        " prevent backups of files, since using vcs
set nowritebackup
set noswapfile

"Show line number
set numberwidth=3
set number

set shiftwidth=2                    " set tab width
set softtabstop=2
set tabstop=2

set et
set textwidth=0
set nowrap

set smarttab
set autoindent                      " set automatic code indentation
set hidden                          " allow background buffers w/out writing

set cursorline                      " highlight current line
"set colorcolumn=79                 " show a right margin column
"hi ColorColumn ctermbg=black guibg=black

"Higlight current line only in insert mode
autocmd InsertLeave * set nocursorline
autocmd InsertEnter * set cursorline


set spelllang=en,es                 " set spell check language
set noeb novb t_vb=                   " disable audio and visual bells

set formatoptions=qrn1

" FOLDING
"set nofoldenable                " disable folding
" set foldenable                  " enable folding
" set foldmethod=syntax           " most files are evenly indented
" set foldlevel=99
"press Space to toggle the current fold open/closed. However, if the cursor is not in a fold, move to the right (the default behavior)
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>
vnoremap <Space> zf
"let javaScript_fold=1


"navigation
"between tabs
nnoremap <leader>l gt
nnoremap <leader>j gt
nnoremap <leader>k gT
nnoremap <leader>h gT

"left panel for openning NERDTree"
"nnoremap <silent><leader>n :NERDTreeToggle<cr>
nnoremap <silent> <F10> :NERDTreeToggle<cr>
noremap <silent> <F10> :NERDTreeToggle<cr>
"let NERDTreeShowHidden=1
"inoremap <silent><leader>n :NERDTreeToggle<cr>

"an additional key mapping for pressing ESCAPE key
inoremap jj <ESC>

"map left right up down keys to do the same if done with CTRL
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

"map ; to : too
nnoremap ; :

"split screen vertically
"nnoremap <leader>w <C-w>v<C-w>l

"fold the tag in HTML files
"nnoremap <leader>ft Vatzf

"paste the selected text and select it too
nnoremap <C-v> V`]

set showmode

"Show Buffer list
set wildchar=<Tab> wildmenu wildmode=list:longest
set wildcharm=<C-Z>

set path=.,,**,~

" indent visual selected code without unselecting and going back to normal mode
vmap > >gv
vmap < <gv

"add a \v before each search string to turn off VIM specific regex and use
"standard regex
nnoremap / /\v
vnoremap / /\v
nnoremap <leader><space> :noh<cr>
set sessionoptions=blank,buffers,curdir,folds,globals,help,localoptions,options,resize,tabpages,winsize,winpos

set guioptions+=a

" only display scroll bar on left and only when there is need for it
" set guioptions-=r
set guioptions-=L
set guioptions-=l
set guioptions+=R


" insert path of current file into a command
cmap <C-P> <C-R>=expand("%:p:h") . "/" <CR>

" fast editing of the .vimrc
nmap <silent> <leader>ev :e $MYVIMRC<cr>
nmap <silent> <leader>sv :so $MYVIMRC<cr>

" allow saving when you forgot sudo
cmap w!! w !sudo tee % >/dev/null

" Unimpaired
" bubble single lines
nmap <C-Up> [e
nmap <C-Down> ]e
" bubble multiple lines
vmap <C-Up> [egv
vmap <C-Down> ]egv

" all my .tpl files ARE html
au BufNewFile,BufRead *.tpl     :set ft=html

" .mu .hogan .hjs files are .mustache files
au BufNewFile,BufRead *.hjs     :set ft=mustache
au BufNewFile,BufRead *.mu      :set ft=mustache
au BufNewFile,BufRead *.hogan   :set ft=mustache

" JavaScript
au BufRead,BufNewFile *.json set ft=javascript

" au BufRead,BufNewFile *.php set indentexpr= | set smartindent
au BufRead,BufNewFile *.phps set filetype=php


set listchars=tab:\ \ ,trail:·      " show · for trailing space, \ \ for trailing tab
"set listchars=tab:▸\ ,eol:¬
set listchars=extends:>
set listchars+=precedes:<
set list                            " show hidden characters

" **whitespace highlighting and stripping
"highlight trailing white spaces
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

function TrimTrailingWhiteSpaces()
  let l = line(".")
  let c = col(".")
  %s/\s\+$//e
  call cursor(l, c)
:endfunction

autocmd FileWritePre * :call TrimTrailingWhiteSpaces()
autocmd FileAppendPre * :call TrimTrailingWhiteSpaces()
autocmd FilterWritePre * :call TrimTrailingWhiteSpaces()
autocmd BufWritePre * :call TrimTrailingWhiteSpaces()

"" STATUS LINE
let g:Powerline_stl_path_style = 'full'
set laststatus=2  " always show status line

function! FileSize()
    let bytes = getfsize(expand("%:p"))
    if bytes <= 0
        return ""
    endif
    if bytes < 1024
        return bytes . " Bytes"
    else
        return (bytes / 1024) . "kB"
    endif
endfunction

"autocmd BufWritePost,FileWritePost *.js !jshint <afile>
"inoremap <silent> <F9> :JSHint <cr>
"nnoremap <silent> <F9> :JSHint <cr>

inoremap <silent><leader>n :lnext<cr>
inoremap <silent><leader>p :lprev<cr>
nnoremap <silent><leader>n :lnext<cr>
nnoremap <silent><leader>p :lprev<cr>

" Rename tabs to show tab number.
" (Based on http://stackoverflow.com/questions/5927952/whats-implementation-of-vims-default-tabline-function)
if exists("+showtabline")
    function! MyTabLine()
        let s = ''
        let wn = ''
        let t = tabpagenr()
        let i = 1
        while i <= tabpagenr('$')
            let buflist = tabpagebuflist(i)
            let winnr = tabpagewinnr(i)
            let s .= '%' . i . 'T'
            let s .= (i == t ? '%1*' : '%2*')
            let s .= ' '
            let wn = tabpagewinnr(i,'$')

            let s .= '%#TabNum#'
            "let s .= i
            " let s .= '%*'
            let s .= (i == t ? '%#TabLineSel#' : '%#TabLine#')
            let bufnr = buflist[winnr - 1]
            let file = bufname(bufnr)
            let buftype = getbufvar(bufnr, 'buftype')
            if buftype == 'nofile'
                if file =~ '\/.'
                    let file = substitute(file, '.*\/\ze.', '', '')
                endif
            else
                let file = fnamemodify(file, ':p:t')
            endif
            if file == ''
                let file = '[No Name]'
            endif
            let s .= i . ' ' . file . '  '
            let i = i + 1
        endwhile
        let s .= '%T%#TabLineFill#%='
        let s .= (tabpagenr('$') > 1 ? '%999XX' : 'X')
        return s
    endfunction
    set showtabline=2
    set tabline=%!MyTabLine()
    set showtabline=1
    highlight TabNum      ctermfg=240 ctermbg=NONE cterm=NONE
    highlight TabLineFill ctermfg=240 ctermbg=NONE cterm=NONE
    highlight TabLine     ctermfg=240 ctermbg=NONE cterm=NONE
    highlight TabLineSel  ctermfg=255 ctermbg=NONE cterm=NONE
endif

set guitablabel=%N/\ %t\ %M

" move tabs to the end for new, single buffers (exclude splits)
autocmd BufNew * if winnr('$') == 1 | tabmove99 | endif

let g:CommandTAcceptSelectionMap = '<,-q>'
let g:CommandTAcceptSelectionTabMap = '<CR>'

let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<,-q>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

"let g:nodejs_complete_config = {
    "\  'js_compl_fn': 'jscomplete#CompleteJS',
    "\  'max_node_compl_len': 15
    "\}
"autocmd FileType javascript
  "\ :setl omnifunc=jscomplete#CompleteJS

au FileType javascript set dictionary+=$HOME/.vim/dict/vim-node/dict/node.dict
highlight Pmenu ctermfg=yellow ctermbg=darkgreen

"jsbeautifer related
autocmd FileType javascript noremap <buffer>  <c-f> :call JsBeautify()<cr>
" for html
autocmd FileType html noremap <buffer> <c-f> :call HtmlBeautify()<cr>
" for css or scss
autocmd FileType css noremap <buffer> <c-f> :call CSSBeautify()<cr>

" [04/21/2015] added for syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = { 'mode': 'passive', 'active_filetypes': [],'passive_filetypes': [] }
"nnoremap <C-w>E :SyntasticCheck<CR> :SyntasticToggleMode<CR>
"inoremap <silent> <F9> :SyntasticCheck<CR> :SyntasticToggleMode<CR>
inoremap <silent><F9> :SyntasticCheck<CR> :lclose<CR>
nnoremap <silent><F9> :SyntasticCheck<CR> :lclose<CR>

inoremap <silent><c-Down> :lnext<cr>
inoremap <silent><c-Up> :lprevious<cr>
nnoremap <silent><c-Down> :lnext<cr>
nnoremap <silent><c-Up> :lprevious<cr>

